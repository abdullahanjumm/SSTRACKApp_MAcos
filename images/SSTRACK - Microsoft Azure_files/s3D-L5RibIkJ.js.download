define("MsPortalImpl/Copilot/ShellCopilot",["require","exports","Fx/Copilot/Interactions","Fx/DependencyInjection","Fx/Ajax","Fx/Diagnostics","MsPortalImpl/Base/Themes","MsPortalImpl/UI/Hubs/UI.FavoritesManagerDeferred","MsPortalImpl/Services/Services.AssetTypes","MsPortalImpl/Services/Services.Settings","MsPortalImpl/Services/Services.Subscriptions","MsPortalImpl/Base/Base.Router","Fx/ResourceManagement","FxHubs/RpcEndPoints","Fx/Composition/Selectable","MsPortalImpl/UI/UI.BladeOpenerImpl","MsPortalImpl/Services/Services.GlobalResourceFilters","MsPortalImpl/Resources/CopilotResources"],(function(e,t,s,r,o,i,a,n,c,u,l,p,d,h,m,y,g,b){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ShellHandler=t.shellCopliotHandlerDefinitions=void 0;const f=(0,i.createLog)(e),w="[selected subscriptions](#settings/subscriptions)",S={type:"string",description:"If the user is referring to the currently open view, set this value appropriately. If the user is not referring to any context, do not include this parameter",enum:["subscription","resourceGroup","resource"]};t.shellCopliotHandlerDefinitions=[{handlerId:"PortalThemeHandler",description:"This handler can answer questions about the current theme and change the portal theme. Supported themes are azure, blue, light, dark, high contrast light and high contrast dark",version:"1.0",sampleQuestions:["What are the themes supported by portal?","Show me the current theme","Change portal theme to azure","Change theme to blue","Change theme to azure mode","Update theme to dark","Modify portal theme to high contrast light","Change portal theme to high contrast dark"],parameters:{type:"object",properties:{themeValue:{type:"string",description:"The theme value that the portal should be set to. Allowed values are azure, blue, light, dark, high contrast light and high contrast dark"}}}},{handlerId:"ArgQueryGenerator",description:"Generates Azure Resource Graph (ARG) queries. ARG queries can be executed to return resource details (such as resource ids, status, os type, disk type, sku, size, etc.), subscription details (such as subscription id, subscription name, etc.) or resource group details (such as resource group id, name, etc.) as a JSON object. This function can also return ARG queries related to changes to resources, resource groups or subscriptions. Changes can be creation, deletion or updates to specific resource properties.",version:"1.0",sampleQuestions:["Query my resources in the US","Write a query to show all virtual machines that are in the Running state","How many resources do I have access to?","Get a list of all storage accounts in west us"],parameters:{type:"object",properties:{argIntent:{type:"string",description:"A detailed description of the intent of the generated query. If this function is being used to generate a query that will return a list of resource IDs, the query intent should indicate that only resource IDs should be projected in the query."},context:S,scope:{type:"object",properties:{subscriptionId:{type:"string",description:"The Azure subscription ID in GUID form."},resourceGroupId:{type:"string",description:"The Azure resource group ID in GUID form."},azureResourceId:{type:"string",description:"The fully qualified Azure resource ID to scope the query to."},region:{type:"string",description:"The Azure region ID."}}}},required:["argIntent"]}},{handlerId:"ArgQueryRunner",description:"Executes well-formed queries against Azure Resource Graph to retrieve a list of the user's Azure resources with resource ids. **Never** execute queries that were not generated by the 'generate_azure_resource_graph_query' function. Returns a maximum of 5 records.",version:"1.0",sampleQuestions:[],parameters:{type:"object",properties:{query:{type:"string",description:"A valid Azure Resource Graph query generated by the 'generate_azure_resource_graph_query' function"},context:S},required:["query"]}},{handlerId:"PortalServicesHandler",description:"This handler can help launch or navigate to service specific experiences in the portal. As examples - Show me all my virtual machines, Browse all my storage accounts, I want to see all my OpenAI instances, Browse to all tags, etc. It optionally accepts a filter string and filters the resources based on that.",version:"1.0",sampleQuestions:["Show me all my virtual machines","Browse all my storage accounts","I want to see all my OpenAI instances tagged with production","Navigate to storage accounts in east us"],parameters:{type:"object",required:["serviceName"],properties:{serviceName:{type:"string",description:"The name of the service from the user's message. It should be something like 'virtual machines', 'storage accounts', 'OpenAI', 'tags', etc."},filter:{type:"string",description:"A list of keywords to filter the service list by. Note that the list should not have any separator other than space between the keywords. Omit the following keywords - name, resource group, subscription, location, tag"}}}},{handlerId:"PortalCommandingHandler",description:"The handler to assist command or operation execution against azure resources and services in portal. You are not responsible for reporting the status of the operation, you should only report operation has been kicked off if user confirms and let them know to use Portal's Notifications pane to track the progress",version:"1.0.0",sampleQuestions:["Stop my virtual machines in east us region","Restart my argtest virtual machine","Restore my storage account","Stop all webapps tagged with env:test"],parameters:{type:"object",required:["resourceIds","commandName","resourceType"],properties:{resourceIds:{type:"array",items:{type:"string",description:"A list of Azure resource ids to execute the command on. Resource ids can be generated by executing an ARG query that matches the user intent. For example if the user asks 'Stop my testbot webapp', find a function that can generate an ARG query to find resource ids for 'testbot' webapp. Once you have the query, execute it and extract the resource ids from the response and pass that into this function."}},commandName:{type:"string",description:"The name of the command from the user's message. It should be something like 'stop', 'restart', 'start', 'delete', 'restore', etc."},resourceType:{type:"string",description:"The Azure resource type e.g. microsoft.compute/virtualmachines"}}}},{handlerId:"SubscriptionSearchHandler",description:"This function finds and returns an Azure subscription id given a search term. The search term is used to identify subscriptions by their display name or subscription id.",version:"1.0",sampleQuestions:["I can't find my subscription foo","I cannot see my subscription <GUID>","I don't see my sub xyz in the portal"],parameters:{type:"object",required:["searchTerm"],properties:{searchTerm:{type:"string",description:"The search term for the subscription name."}}}},{handlerId:"FindSubscriptionHandler",description:"This function can help find subscriptions in the portal. The function expects a valid subscription id as a required input argument.",version:"1.0",sampleQuestions:['{"subscriptionId":<GUID>}'],parameters:{type:"object",required:["subscriptionId"],properties:{subscriptionId:{type:"string",description:"The Azure susbcription ID in GUID form."}}}}];const I={azure:{themeName:"azure",contrast:0},blue:{themeName:"blue",contrast:0},light:{themeName:"light",contrast:0},dark:{themeName:"dark",contrast:0},"high contrast dark":{themeName:"dark",contrast:2},"high contrast light":{themeName:"light",contrast:1}};let A=class{constructor(e,t,s,r,o,i,a,n){this._themesManager=e,this._favoritesManager=t,this._assetTypeService=s,this._router=r,this._bladeOpener=o,this._userSettingsManager=i,this._subscriptionsService=a,this._diContainer=n}async executeShellHandler(e,t,r,i){const a=new s.CopilotInteractions({handlerId:e,conversationId:t,handlerArguments:r,runtime:i});switch(e){case"PortalThemeHandler":{const e=(r.themeValue||"").toLowerCase(),t=I[e||""],s=(e,t)=>`${0!==t?"High Contrast ":""}${e.title}`,o=this._themesManager.currentTheme(),i=this._themesManager.highContrastMode(),n=s(o,i);if(t){const e=this._themesManager.getThemes().find((e=>e.name===t.themeName));if(o===e&&i===t.contrast)return"Current portal theme is already set to "+n;const r=s(e,t.contrast);return a.showMessage({body:[{type:"TextBlock",text:b.Portal.changingTheme.format(r),wrap:!0}]}),this._themesManager.highContrastMode(t.contrast),this._themesManager.currentTheme(e),{status:"success",oldTheme:n,newTheme:r}}return{currentTheme:n,supportedThemes:["azure","blue","light","dark","high contrast light","high contrast dark"]}}case"PortalServicesHandler":{const e=(r.serviceName||"").toLowerCase();return e?this._favoritesManager.filterAllServices({filter:e,possibleFavorites:null,dontApplyVisibility:!0}).then((t=>{let s=1===t.filteredTypes.length&&t.filteredTypes[0];if(!s){const r=t.filteredTypes.filter((t=>t.assetType?.compositeDisplayName?.lowerPlural===e||t.assetType?.compositeDisplayName?.lowerSingular===e||(t.assetType.compositeDisplayName?.singular||"").toLowerCase()===e||(t.assetType?.compositeDisplayName?.plural||"").toLowerCase()===e||t.label===e));s=1===r.length&&r[0]}if(s){let e=this._assetTypeService.getAssetTypeDeepLink(s.assetType);return e=e.replace("/BrowseResourceBlade/","/BrowseResource/"),1===s.assetType.assetTypeManifest.browseType&&r.filter&&(e=e+"/filter/"+r.filter),this._router.route(e,{openedBy:0}),s.assetType.compositeDisplayName.plural+" has been opened."}return"Multiple results were found. Which of the following did you intend to open? "+t.filteredTypes.map((e=>e.assetType.compositeDisplayName.plural)).join(",")})):"I don't know what you mean."}case"ArgQueryGenerator":{const e=r,t=e.argIntent,s=MsPortalFx.isFeatureEnabled("ppeargquerygenerator")?"Microsoft.ResourceGraph.PPE":"Microsoft.ResourceGraph";if(!t)return{status:"failure",message:"Please provide a query intent"};let i="";if(e.scope){const s=e.scope,r=s.subscriptionId,o=s.resourceGroupId,a=s.azureResourceScopeId;if(r&&!t.includes(r)&&(i=`Current subscription id is "${r}"`),o&&!t.includes(o)){const e=d.ArmId.parse(o);e.resourceGroup&&(i=`Current resource group is "${e.resourceGroup}" in subscription "${e.subscription}"`)}a&&!t.includes(a)&&(i=`Current resource id is "${a}"`);const n=e.scope.region;t.includes(n)||n&&(i+=` Current region is "${n}".`)}else if(e.context)switch(e.context.toLowerCase()){case"subscription":{const e=await a.inferResourceIds({scope:"Subscription"});if(e.length){const t=d.ArmId.parse(e.pop()).subscription;t&&(i=`Current subscription id is "${t}"`)}break}case"resourcegroup":{const e=await a.inferResourceIds({scope:"ResourceGroup"});if(e.length){const t=d.ArmId.parse(e.pop());t.resourceGroup&&(i=`Current resource group is "${t.resourceGroup}" in subscription "${t.subscription}"`)}break}case"resource":{const e=await a.inferResourceIds();e.length&&(i=`Current resource id is "${e.pop()}"`);break}}let n=t;i&&(n=MsPortalFx.ensureSuffix(n,". ")+i),a.showProgress(b.ARG.tryingToGenerateIntent.format(n));try{const e=await(0,o.batch)({uri:`/providers/${s}/generateQuery?api-version=2023-09-01-preview`,type:"POST",setTelemetryHeader:"copilot-argquerygenerator",content:{prompt:n}}),t=e.content.query;return t?{status:"success",query:t,instructions:"If you show the query to the user, wrap it in an 'argquery' language markdown code block"}:(f.verbose("Unable to generate ARG query",e.httpStatusCode,e.content?.status),{status:"failure",message:"Could not generate a query for the provided intent",reason:e.content?.status?.message})}catch(e){const t=e,s=t.jqXHR?.status;return f.error("Failed to generate ARG query",s,e),{status:"failure",message:"Failed to generate the query",statusCode:s}}}case"ArgQueryRunner":{const e=r,t=e.query;if(!t)return{status:"failure",message:"Please provide a query"};let s,o=null;if(e.context)switch(e.context.toLowerCase()){case"subscription":{const e=await a.inferResourceIds({scope:"Subscription"});e.length&&(o=[d.ArmId.parse(e.pop()).subscription]);break}case"resourcegroup":{const e=await a.inferResourceIds({scope:"ResourceGroup"});if(e.length){const t=d.ArmId.parse(e.pop());t.resourceGroup&&(o=[t.subscription])}break}case"resource":{const e=await a.inferResourceIds();if(e.length){const t=d.ArmId.parse(e.pop());t.resourceGroup&&(o=[t.subscription])}break}}if(o)s="context";else{if(await v(this._userSettingsManager))s="tenant";else try{o=(await this._subscriptionsService.getInSessionSelectedSubscriptions())().map((e=>e.subscriptionId)),s="selected"}catch(e){f.warning("Failed to get selected subscriptions",e)}}const i=function(e){const t=/[\r\n]+/g;return e.replace(t,"").split("|").join("\r\n|")}(t);let n=b.ARG.executingQuery,c=n;if("selected"===s)n=b.ARG.queryingYourSubs.format(w),c=b.ARG.queryingYourSubsStatic;else if("context"===s)try{const e=await MsPortalFx.Azure.getSubscriptionInfo(o[0]);e&&(n=b.ARG.queryingSubName.format(e.displayName))}catch(e){f.warning(`Failed to get subscription info for subscription id "${o[0]}". `,e),n=b.ARG.queryingTheSubStatic}await a.showMessage({body:[{type:"TextBlock",text:n,wrap:!0},{type:"CodeBlock",text:i,language:"argquery"}]}),a.showProgress(c);try{const e=await MsPortalFx.require("FxHubs/ArtHelpers/ArtApis"),r=await e.getDataFromArt({query:t,options:{resultFormat:"table",$top:5},subscriptions:o},"copilot-argqueryrunner"),i=r.totalRecords&&(r.count||r.data.rows.length)<r.totalRecords,a=r.data.columns.some((e=>"id"===e.name.toLowerCase())),n=[];i&&n.push(`Inform the user that you are showing only the first 5 of ${r.totalRecords} total results.`);const c="selected"===s?[]:o;n.push(`Include a link to [Azure Resource Graph Explorer](${function(e,t){const s="#view/HubsExtension/ArgQueryBlade";if(!e)return s;const r=t?.length?t:[],o=encodeURIComponent(JSON.stringify({scope:2,values:r}));return`${s}/query/${encodeURIComponent(e)}/autoExecuteQuery/true/queryScope~/${o}`}(t,c)}) in your response so the user can explore all query results`);const u={status:"success",results:r.data};if(a&&n.push("Show resource names as markdown links. Links should be in the format: [name](#resource/<id>). For example: [My Resource](#resource/subscriptions/123/resourceGroups/456/providers/Microsoft.Compute/virtualMachines/789)"),o?.length)if("selected"===s)n.push(`Inform the user that the query was executed against their selected subscriptions. Show a link to ${w} in your response`);else if("context"===s){let e=o[0];try{const t=await MsPortalFx.Azure.getSubscriptionInfo(o[0]);t&&(e=t.displayName)}catch(e){f.warning(`Failed to get subscription info for subscription id "${o[0]}". `,e)}n.push(`Inform the user that the query was executed against subscription ID "/subscriptions/${o[0]}". Include a link to [${e}](#resource/subscriptions/${o[0]}) in your response`)}return u.instructions=n.map((e=>MsPortalFx.ensureSuffix(e.trim(),"."))).join(" "),u}catch(e){return f.error("Failed to run ARG query",e.httpStatusCode,e),{status:"failure",message:"Failed to execute the query",statusCode:e.httpStatusCode}}}case"PortalCommandingHandler":{const e=r,t=(e.commandName||"").toLowerCase(),s=(e.resourceType||"").toLowerCase();if(s){const r=await h.ArtBrowse.getBrowsePrereqsEndpoint.invoke(FxImpl.Rpc.client,"fxw",{resourceType:s});if(!r?.browseQueryManifest?.commands)return{status:"failure",message:"Ask user to clarify the service or resource type they would like to perform operations on."};{const o=r?.browseQueryManifest?.commands?.commands?.find((e=>e.label.toLowerCase()===t.toLowerCase()));if(o){const e=await MsPortalFx.Assets.getResourceTypeAssetTypeInformation([s]);if("yes"!==await a.showMessageAndAwait({body:[{type:"TextBlock",text:b.Portal.confirmPerformOperationOnSingle.format(t,e[0]?.assetType),wrap:!0}],actions:[{id:"yes",type:"Action.Submit",title:b.Portal.yes,style:"positive"},{id:"no",type:"Action.Submit",title:b.Portal.no}]}))return{status:"cancel",message:"Let user know the operation was not kicked off since they clicked on cancel button during confirmation."};if(o.bladeReference){const e=new m.PdlBladeReference(o.bladeReference.blade,o.bladeReference.extension,{parameters:o.bladeReference.parameters}),s=o.bladeReference?.inContextPane?1:8;return await new Promise((t=>{this._bladeOpener.openBlade(e,{flags:s,telemetryName:"PortalCommandingHandler"}),t()})),a.showMessage({body:[{type:"TextBlock",text:b.Portal.operationExperienceOpened.format(t),wrap:!0}]}),{status:"success"}}}const i=r?.browseQueryManifest?.commands?.selectionCommands?.find((e=>e.label?.toLowerCase()===t.toLowerCase()));if(!i)return{status:"failure",message:"Let users know that there were issues with locating command execution metadata or the operation is not currently supported."};{let r=e.resourceIds;const o=r?.every((e=>0!==d.ArmId.parse(e).kind));if(r?.length&&o||(r?.length&&!o&&f.warning(`Portal commanding handler recieved invalid resource ids: ${JSON.stringify(r)}`),r=await a.inferResourceIds({useResourcePicker:!0,filters:{resourceTypes:[s]}})),"delete"===i.label.toLowerCase()&&r.length){if("yes"===await a.showMessageAndAwait({body:[{type:"TextBlock",text:b.Portal.confirmPerformOperation.format(t),wrap:!0}],actions:[{id:"yes",type:"Action.Submit",title:b.Portal.yes,style:"positive"},{id:"no",type:"Action.Submit",title:b.Portal.no}]})){const e=r.map((e=>{const t=d.ArmId.parse(e);return{name:t.resourceName,resourceId:e,resourceType:t.resourceType?.toLowerCase()}})),o=new m.PdlBladeReference("BulkDelete.ReactView","Microsoft_Azure_Resources",{parameters:{resources:e,commandDefinition:i,resourceType:s,resourceInfoCount:e.length}}),n=1;return await new Promise((e=>{this._bladeOpener.openBlade(o,{flags:n,telemetryName:"PortalCommandingHandler"}),e()})),a.showMessage({body:[{type:"TextBlock",text:b.Portal.operationExperienceOpened.format(t),wrap:!0}]}),{status:"success"}}return{status:"failure",message:"Let user know that they chose not to perform the operation"}}{const e=e=>{const s={body:[{type:"TextBlock",text:b.Portal.confirmPerformOperation.format(t),wrap:!0}],actions:[{id:"yes",type:"Action.Submit",title:b.Portal.yes,style:"positive"},{id:"no",type:"Action.Submit",title:b.Portal.no}]};return e&&s.actions.push({id:"reset",type:"Action.Submit",title:b.Portal.resetSelection}),s},o=async e=>{const t={};for(const s in e.data)t[s]="true"===e.data[s];const r=Object.keys(t).filter((e=>!0===t[e]));if(r?.length){const e=r.map((e=>{const t=d.ArmId.parse(e);return{name:t.resourceName,resourceId:e,resourceType:t.resourceType?.toLowerCase()}}));return(await MsPortalFx.require("FxHubs/ResourceCommands/ArmBulkCommand")).execute(i,s,e,null,null),a.showMessage({body:[{type:"TextBlock",text:b.Portal.startedCommandWithNotification,wrap:!0}]}),{status:"success"}}return{status:"failure",message:"Let user know they first need to select resources in order to perform operation."}};if(!r.length)return{status:"failure",message:"Let user know that resources need to be selected for the operation they would like to perform."};{const t=await a.showResources({resourceIds:r,awaitForSelection:!0,card:e(!0),showDetails:{subscription:!0,resourceGroup:!0}});if("yes"===t.result.toLowerCase())return o(t);if("reset"===t.result.toLowerCase()){const t=await a.selectResources({maxSelectedItems:5,filters:{resourceTypeIds:{preselectedValues:[s],includedValues:[s]}}});if(!t?.length)return{status:"failure",message:"Let user know they first need to select resources in order to perform operation."};{const s=await a.showResources({resourceIds:t,awaitForSelection:!0,card:e(!1),showDetails:{subscription:!0,resourceGroup:!0}});if("yes"===s.result.toLowerCase())return o(s);if("no"===s.result.toLowerCase())return{status:"cancel",message:"Let user know the operation was not kicked off since they clicked on cancel button during confirmation."}}}else if("no"===t.result.toLowerCase())return{status:"cancel",message:"Let user know the operation was not kicked off since they clicked on cancel button during confirmation."}}}}}}break}case"SubscriptionSearchHandler":{const{searchTerm:e}=r;try{const t=await this._subscriptionsService.searchSubscriptionFromArg(e,"ShellCopilot");if(1===t.subscriptions.length)return{subscriptionId:t.subscriptions[0].subscriptionId,displayName:t.subscriptions[0].displayName};if(!(t.subscriptions.length>1))return"No subscriptions were found that match the search term";{const e=await a.showMessageAndAwait({body:[{type:"Input.ChoiceSet",id:"subscriptionId",label:b.Subscriptions.Label.multipleMatchesFound,style:"compact",placeholder:b.Subscriptions.pleaseChooseSubscription,choices:t.subscriptions.map((e=>({title:`${e.displayName} (${e.subscriptionId})`,value:e.subscriptionId})))}],actions:[{id:"picksub",type:"Action.Submit",title:b.Subscriptions.selectSubscription,style:"positive"}]});if("picksub"===e.result){const s=e.data.subscriptionId,r=t.subscriptions.find((e=>e.subscriptionId.toLowerCase()===s.toLowerCase()));return{subscriptionId:r.subscriptionId,displayName:r.displayName}}}}catch(e){return f.error(e),"An unexpected error occurred."}break}case"FindSubscriptionHandler":{const{subscriptionId:e}=r;if(e)try{const t=await this._subscriptionsService.getInSessionSelectedSubscriptions();if(1===t().filter((t=>t.subscriptionId.toLowerCase()===e.toLowerCase())).length)return`Subscription [${e}](#resource/subscriptions/${e}) is already part of the selected subscriptions list. Ask the customer for more details about where the subscription is missing.`;const s=await this._subscriptionsService.getSubscriptionFromArg(e,"ShellCopilot");if(await v(this._userSettingsManager)){const t=await this._diContainer.getAsync(g.ResourceFilterManager),r=await a.showMessageAndAwait({body:[{type:"TextBlock",text:b.Subscriptions.subscriptionFiltered.format(`[${s.displayName}](#resource/subscriptions/${e})`),wrap:!0}],actions:[{id:"resetToDefault",type:"Action.Submit",title:b.Subscriptions.resetFilter,style:"positive"},{id:"opensettings",type:"Action.OpenUrl",title:b.Subscriptions.openFilterSettings,url:"#settings/filters",style:"positive"},{id:"cancel",type:"Action.Submit",title:b.Portal.cancel}]});return"resetToDefault"===r?(t.activateFilter(""),{status:"success",message:"The global resource filter has been reset to default. Is the subscription visible now?"}):"opensettings"===r?{status:"success",message:"Subscription filter settings view has been opened."}:{message:"Operation canceled by user."}}{const s=await this._subscriptionsService.getGlobalDisplayedSubscriptions(),r=await this._subscriptionsService.getGlobalSelectedSubscriptions(),o=s.filter((t=>t.subscriptionId.toLowerCase()===e.toLowerCase()));if(1===o.length){const s=o[0].displayName,i=await a.showMessageAndAwait({body:[{type:"TextBlock",text:b.Subscriptions.subscriptionFilteredWithAdd.format(`[${s}](#resource/subscriptions/${e})`),wrap:!0}],actions:[{id:"addtoselectedsubs",type:"Action.Submit",title:b.Subscriptions.addToSelected,style:"positive"},{id:"opensub",type:"Action.OpenUrl",title:b.Subscriptions.openSubscription,url:"#resource/subscriptions/"+e,style:"positive"},{id:"cancel",title:b.Portal.cancel,type:"Action.Submit"}]});return"addtoselectedsubs"===i?(this._subscriptionsService.setInSessionSelectedSubscriptions([...t().map((e=>e.subscriptionId)),e]),this._subscriptionsService.setGlobalSelectedSubscriptions([...r().map((e=>e.subscriptionId)),e]),{status:"success",message:`Subscription [${s}](#resource/subscriptions/${e}) has been added to the selected subscriptions list.`}):"opensub"===i?{status:"success",message:`Subscription [${s}](#resource/subscriptions/${e}) view has been opened.`}:{message:"Operation canceled by user."}}return{status:"error",message:"Subscription not found in portal context"}}}catch(e){return f.error(e),"An unexpected error occurred."}break}}}};async function v(e){if(!MsPortalFx.isFeatureEnabled("globalresourcefilter"))return!1;try{return!!await e.querySetting(19,"optedIn")}catch(e){return f.warning("Failed to get advanced filters setting",e),!1}}t.ShellHandler=A,t.ShellHandler=A=__decorate([__metadata("fx:diagnostics",[e,"ShellHandler"]),r.Class(),__metadata("design:paramtypes",[a.ThemeManager,n.FavoritesManagerDeferred,c.AssetTypeService,p.Router,y.BladeOpener,u.SettingsManager,l.SubscriptionsUserContext,r.Container])],A)}));